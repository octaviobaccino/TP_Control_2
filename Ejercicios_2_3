% Funcion para importar los datos:

function [time_v, i_t, Vc_t, Ve_t] = import_data(workbookFile, sheetName, startRow, endRow)
%IMPORTFILE Import data from a spreadsheet
%  [TIME_V, I_T, VC_T, VE_T] = IMPORTFILE(FILE) reads data from the
%  first worksheet in the Microsoft Excel spreadsheet file named FILE.
%  Returns the data as column vectors.
%
%  [TIME_V, I_T, VC_T, VE_T] = IMPORTFILE(FILE, SHEET) reads from the
%  specified worksheet.
%
%  [TIME_V, I_T, VC_T, VE_T] = IMPORTFILE(FILE, SHEET, STARTROW, ENDROW)
%  reads from the specified worksheet for the specified row interval(s).
%  Specify STARTROW and ENDROW as a pair of scalars or vectors of
%  matching size for dis-contiguous row intervals.
%
%  Example:
%  [time_v, i_t, Vc_t, Ve_t] = importfile("D:\Facultad Octavio\Control 2\Curvas_Medidas_RLC_2024.xls", "Hoja1", 2, 2001);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 02-Apr-2024 09:58:09

%% Input handling

% If no sheet is specified, read first sheet
function [time_v, i_t, Vc_t, Ve_t] = import_data(workbookFile, sheetName, startRow, endRow)
%IMPORTFILE Import data from a spreadsheet
%  [TIME_V, I_T, VC_T, VE_T] = IMPORTFILE(FILE) reads data from the
%  first worksheet in the Microsoft Excel spreadsheet file named FILE.
%  Returns the data as column vectors.
%
%  [TIME_V, I_T, VC_T, VE_T] = IMPORTFILE(FILE, SHEET) reads from the
%  specified worksheet.
%
%  [TIME_V, I_T, VC_T, VE_T] = IMPORTFILE(FILE, SHEET, STARTROW, ENDROW)
%  reads from the specified worksheet for the specified row interval(s).
%  Specify STARTROW and ENDROW as a pair of scalars or vectors of
%  matching size for dis-contiguous row intervals.
%
%  Example:
%  [time_v, i_t, Vc_t, Ve_t] = importfile("D:\Facultad Octavio\Control 2\Curvas_Medidas_RLC_2024.xls", "Hoja1", 2, 2001);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 02-Apr-2024 09:58:09

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 3
    startRow = 2;
    endRow = 2001;
end

%% Setup the Import Options
opts = spreadsheetImportOptions("NumVariables", 4);

% Specify sheet and range
opts.Sheet = sheetName;
opts.DataRange = "A" + startRow(1) + ":D" + endRow(1);

% Specify column names and types
opts.VariableNames = ["time_v", "i_t", "Vc_t", "Ve_t"];
opts.VariableTypes = ["double", "double", "double", "double"];

% Import the data
tbl = readtable(workbookFile, opts, "UseExcel", false);

for idx = 2:length(startRow)
    opts.DataRange = "A" + startRow(idx) + ":D" + endRow(idx);
    tb = readtable(workbookFile, opts, "UseExcel", false);
    tbl = [tbl; tb]; %#ok<AGROW>
end

%% Convert to output type
time_v = tbl.time_v;
i_t = tbl.i_t;
Vc_t = tbl.Vc_t;
Ve_t = tbl.Ve_t;
end

% Programa:

clear; close all;
%-------------------------------------------

% Alumno: Octavio Baccino
% Profesor: Pucheta Julian
% Codigo para Matlab

%--------------------------------------------
% Ejercicios 2 y 3 Trabajo Practico
%--------------------------------------------

%% Metodo de la respuesta al escalon

% Importar valores de Excel
[time_v, i_v, Vc_v, Ve_v] = import_data("Curvas_Medidas_RLC_2024.xls"); 

% Plots para visaulizar las curvas de corriente y Vc
% figure;
% plot(time_v,i_v);
% 
% figure;
% plot(time_v,Vc_v);
% hold on;
% plot(time_v,Ve_v)

% Puntos elegidos para realizar la aproximacion de la funcion de
% trasnferencia

delay = 10e-3; % Lo busco en la tabla de datos (busco donde empieza la entrada)

t1 = 0.003;
t2 = 2*t1;
t3 = 3*t1;

y1 = Vc_v(t1/0.0001+delay/0.0001+1);
y2 = Vc_v(t2/0.0001+delay/0.0001+1);
y3 = Vc_v(t3/0.0001+delay/0.0001+1);

% Extraido de "Identification for the second-order systems based on the step response"
% Lei Chen, Junhong Li, Ruifeng Ding
% Mathematical and Computer Modelling 53 (2011) 1074â€“1083
% Codigo realizado por JAP

StepAmplitude = 12;

K = 1;

k1=(1/StepAmplitude)*y1/K-1; %Afecto el valor del Escalon

k2=(1/StepAmplitude)*y2/K-1;

k3=(1/StepAmplitude)*y3/K-1;

be=4*k1^3*k3 - 3*k1^2*k2^2 - 4*k2^3 + k3^2 + 6*k1*k2*k3;

if be > 0
    
    alfa1=(k1*k2+k3-sqrt(be))/(2*(k1^2+k2));
    alfa2=(k1*k2+k3+sqrt(be))/(2*(k1^2+k2));

else
    
    alfa1=(k1*k2+k3-sqrt(be))/(2*(k1^2+k2));
    alfa2=(k1*k2+k3+sqrt(be))/(2*(k1^2+k2));

end

beta=(k1+alfa2)/(alfa1-alfa2);

T1 = -t1/log(alfa1);
T2 = -t1/log(alfa2);
T3 = beta*(T1-T2)+T1;

G_ang = tf(K*[T3 1],conv([T1 1],[T2 1]));

% Plot para verificar dinamica
% figure;
% step(G_ang)

%% Funcion de Transferencia a partir de ecuaciones en espacio de estados

syms R L C s

A_m = [-R/L, -1/L; 1/C, 0];

B_m = [1/L 0]';

C_m = [0 1];

D_m = 0;

I_m = eye(2);

adj = adjoint(s*I_m-A_m);

det_1 = det(s*I_m-A_m);

G_theo = (C_m*adj*B_m)/det_1;

% G = 1/(C*L*s^2 + C*R*s + 1)

%% Comparo la funcion de transferencia aproximada con la expresion teroica 
%  para obtener los valores de R, L y C

% G_theo = 1/(C*L*s^2 + C*R*s + 1);
% G_ang = (-5.023e-06 s + 1) / (9.865e-07 s^2 + 0.00269 s + 1);

% C*L == 9.865e-07;
% C*R == 0.00269;

% Busco R a partir de la corriente maxima partiendo de condiciones
% iniciales nulas

R = StepAmplitude/0.036; % R = Ve/Imax_inicial; 

% Verificiacion de las curvas de corriente y Vc

C = 0.00269/R;% C = 0.00269/R;

L = 9.865e-07/C;

A_m = [-R/L, -1/L; 1/C, 0];

B_m = [1/L 0]';

x = [0 0]'; % condiciones iniciales nulas

%% Evolucion del sistema

Ts = 1e-4; % Igual al de la tabla

Vc_apox = zeros(1, length(time_v));
I_aprox = zeros(1, length(time_v));

u = Ve_v;

for idx = 1:length(time_v)
    
    I_aprox(idx) = x(1);
    Vc_apox(idx) = x(2);
    
    xp = A_m*x + B_m.*u(idx);
    
    x = x + xp.*Ts;
    
end

%% Plots para comparar curva teorica e identificada

fz = 15;  

figure;
plot(time_v, I_aprox, 'LineWidth', 1.5);
hold all;
plot(time_v, i_v, '--','LineWidth', 1.7);
grid on;
title('Curvas de corriente','Interpreter','latex','FontSize',fz);
ylabel('I[A]','Interpreter','latex','FontSize',fz);
xlabel('t[s]','Interpreter','latex','FontSize',fz);
legend('Curva identificada','Curva real (medida)','Interpreter','latex','FontSize',fz-2);

figure;
plot(time_v, Vc_apox, 'LineWidth', 1.5);
hold all;
plot(time_v, Vc_v, '--', 'LineWidth', 1.7)
plot(time_v, Ve_v);
grid on;
title('Curvas de Tension en el Capacitor','Interpreter','latex','FontSize',fz);
ylabel('Vc[V]','Interpreter','latex','FontSize',fz);  
xlabel('t[s]','Interpreter','latex','FontSize',fz);
legend('Curva identificada','Curva real (medida)','Entrada','Interpreter','latex','FontSize',fz-2);

% Se observa un error en la amplitud de la curva de corriente identificada
% debido a la aproximacion de R. Variando manualmente este valor se puede
% llegar a mejorar la similitud

